<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: doctrine2 | Benedikt Wolters]]></title>
  <link href="http://mightyuhu.github.com/blog/categories/doctrine2/atom.xml" rel="self"/>
  <link href="http://mightyuhu.github.com/"/>
  <updated>2013-11-02T23:52:33+01:00</updated>
  <id>http://mightyuhu.github.com/</id>
  <author>
    <name><![CDATA[Benedikt Wolters]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Doctrine2 Event Listener: persisting in onFlush()]]></title>
    <link href="http://mightyuhu.github.com/blog/2012/03/27/doctrine2-event-listener-persisting-a-new-entity-in-onflush/"/>
    <updated>2012-03-27T15:34:33+02:00</updated>
    <id>http://mightyuhu.github.com/blog/2012/03/27/doctrine2-event-listener-persisting-a-new-entity-in-onflush</id>
    <content type="html"><![CDATA[<p>Another Doctrine2 Post. This time we're taking a look on Event Listeners/Subscribers.
Event Listeners are a real powerful thing in Doctrine2. Besides <code>LifeCycleCallback</code>s they can be used if you'll want to scan through your Entity i.e. for specialized standard field. Also implementing a global Versionable behaviour (since that is no longer a native Doctrine behaviour) ist very easy to do inside Event Listeners.</p>

<p>My motivation for this quick blog post is just to give people a gist how to use EventListeners because the documentation is -again- a pain in the ass.
Im just using <code>onFlush()</code> here, since <code>preUpdate()</code> is somehow not called by <code>SonataDoctrineORMAdminBundle</code> which i'm using to mainly manage my Entities.</p>

<p>Lets start by creating a EventListener in <code>My/Bundle/Listener/MyEventListener.php</code></p>

<p><div><script src='https://gist.github.com/2215056.js?file=MyEventListener.php'></script>
<noscript><pre><code>&lt;?php

namespace My\Bundle\Listener;

use Doctrine\Common\EventSubscriber;
use Doctrine\ORM\Events;
use Doctrine\ORM\Event\OnFlushEventArgs;
use Doctrine\ORM\Mapping\ClassMetadata;

use My\Bundle\Entity\Event;

class MyEventListener {
	private $em = null;
	private $uow = null;
	private $attachedEvents;
	
	public function onFlush(OnFlushEventArgs $args) {

		$this -&gt; em = $args -&gt; getEntityManager();
		$eventManager = $this -&gt; em -&gt; getEventManager();

		// Remove event, if we call $this-&gt;em-&gt;flush() now there is no infinite recursion loop!
		$eventManager -&gt; removeEventListener('onFlush', $this);

		$this -&gt; uow = $this -&gt; em -&gt; getUnitOfWork();

		//Iterate through Insertions:
		foreach ($this-&gt;uow-&gt;getScheduledEntityInsertions() as $entity) {

			//Get the plain ClassName without Namespace
			$className = join('', array_slice(explode('\\', get_class($entity)), -1));
			$meta = $this -&gt; em -&gt; getClassMetadata(get_class($entity));

			$value = $meta -&gt; getReflectionProperty('myEntityFieldName') -&gt; getValue($entity);
			
			//... create your Entity...
			$newEvent = new Event;
			$newEvent-&gt;setName('...');
			//...
			
			$this -&gt; em -&gt; persist($newEvent);
			$this -&gt; em -&gt; flush();
			
			}

			// recalculate changeset, since we might messed up the relations
			$this -&gt; em -&gt; getUnitOfWork() -&gt; recomputeSingleEntityChangeSet($meta, $entity);
		}


		//We can also iterate through planned deletions
		foreach ($this-&gt;uow-&gt;getScheduledEntityDeletions() AS $entity) {
			$className = join('', array_slice(explode('\\', get_class($entity)), -1));
			
			//Search for old dependencies and delete them too...
			
			$events = $this -&gt; em -&gt; getRepository('MyBundle:Event') -&gt; findBy('myProperty'=&gt;'value');
					foreach ($events as $entity) {
						$this -&gt; em -&gt; remove($entity);
					}
				}
			}
			$this -&gt; em -&gt; flush();
		}

		//Or even react on updates:
		foreach ($this-&gt;uow-&gt;getScheduledEntityUpdates() as $key =&gt; $entity) {
			$className = join('', array_slice(explode('\\', get_class($entity)), -1));
			$meta = $this -&gt; em -&gt; getClassMetadata(get_class($className));
			//ChangeSet is an array of key - array pairs.
			//$changeSet['fieldname'] =&gt; array(0 =&gt; 'oldValue', 1 =&gt; 'newValue')
			//if the target Value is i.e. a date, the indices 0 and 1 are i.e. DateTime Objects
			$changeSet = $this -&gt; uow -&gt; getEntityChangeSet($entity);

			//You can modify your Entities based on the Changes here..
			//After Persisting: 
			
			$this-&gt;uow-&gt;computeChangeSet($meta, $entity)
			}
		}
		
		//Re-attach since we're done
		$eventManager -&gt; addEventListener('onFlush', $this);
	}

}
</code></pre></noscript></div>
</p>

<p>Now all that is left to do is to attach the Event Listener to DI. If you're using Symfony2 you'll just need to update your <code>app/config/config.yml</code></p>

<p><div><script src='https://gist.github.com/2215056.js?file=config.yml'></script>
<noscript><pre><code>services:
   MyEventListener:
      class: My\Bundle\Listener\MyEventListener 
      tags:
        - { name: doctrine.event_listener, event: onFlush, method: onFlush }
</code></pre></noscript></div>
</p>

<p>For further information feel free to take a look at the beautiful <a href="http://docs.doctrine-project.org/projects/doctrine-orm/en/2.0.x/reference/events.html#implementing-event-listeners">Doctrine2 Documentation</a>, which I obviously love so much.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Doctrine2 One-To-Many, Unidirectional with Join Table Association Mapping]]></title>
    <link href="http://mightyuhu.github.com/blog/2012/03/24/doctrine2-one-to-many/"/>
    <updated>2012-03-24T21:09:05+01:00</updated>
    <id>http://mightyuhu.github.com/blog/2012/03/24/doctrine2-one-to-many</id>
    <content type="html"><![CDATA[<p>Since the Doctrine 2.0 Documentation for this seems to be kinda fucked up at the moment, here is a working exampe of a <code>One-To-Many, Unidirectional with Join-Table Association Mapping</code></p>

<h2>Scenario</h2>

<p>A driver can have many documents, but a document has no direct Entity relation to a driver.</p>

<h2>Solution</h2>

<p>Use Many-To-Many to encode it properly.</p>

<p><div><script src='https://gist.github.com/2186735.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>Im using annotations with the <code>ORM</code>-Namespace since its embedded in Symfony2.
Note that One-To-Many is coded throughout Many-To-Many but the unique index is set for the join table.</p>

<p>In my POV thats kinda confusing since there is a <code>@One-To-Many</code> relationship, but whatever!</p></p>
]]></content>
  </entry>
  
</feed>
