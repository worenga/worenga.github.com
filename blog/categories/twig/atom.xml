<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: twig | Benedikt Wolters]]></title>
  <link href="http://mightyuhu.github.com/blog/categories/twig/atom.xml" rel="self"/>
  <link href="http://mightyuhu.github.com/"/>
  <updated>2013-05-20T19:57:34+02:00</updated>
  <id>http://mightyuhu.github.com/</id>
  <author>
    <name><![CDATA[Benedikt Wolters]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Templating Systems - a new hope]]></title>
    <link href="http://mightyuhu.github.com/blog/2011/04/09/templating-systems-a-new-hope/"/>
    <updated>2011-04-09T23:10:31+02:00</updated>
    <id>http://mightyuhu.github.com/blog/2011/04/09/templating-systems-a-new-hope</id>
    <content type="html"><![CDATA[<h2>Birth and Death of old Templating Languages</h2>

<p>A common first time project of every PHP-Developer is to write his own Templating System.
Templating in pseudo languages with weird syntaxes used to be very trendy and served the matter to draw a line between presentation logic and business logic.</p>

<p>It was also believed Templating-languages would be a suitable replacement for plain-php or your favorite backend language, so designers (who -so the common developer belief- are obviously are some zombie creatures without brains) did not need to learn php. This turned out to be a huge error in reasoning, because usually Designers can code at all. (And if they claim they "can", they usually suck at it.)
Another common problem with Template-Systems is performance: other files are parsed by php in the runtime using slow regex or maybe even reparsed with output buffering.</p>

<p>Being a performance enthusiast it always bothered me that something is parsed and compiled by a language such as php, which is parsed itself, just for the sake of code-clearness. Usually they are not cached, and the set of functions is very limited (output this, loop that). If they're cached (e.g. Smarty) there are other Problems (just take a look at the "Cache-File"). Futhermore you as a developer need to learn a simpler templating language, which usually sucks. Debugging Template can be a pain, depending on which template System you use.</p>

<!-- more -->


<h2>PHP is not (anymore) a good template language</h2>

<p>So being enthusiastic about Template-Systems at first, I stopped using them and used the paradigma that <a href="http://www.phppatterns.com/docs/design/templates_and_template_engines">"PHP is a Templating language by itself"</a>.
But the problem with Templating in php is that it is very verbose and tedious.
<div><script src='https://gist.github.com/894638.js?file=gistfile1.php'></script>
<noscript><pre><code>&lt;?php if ($items): ?&gt;
  &lt;?php foreach ($items as $item): ?&gt;
    * &lt;?php echo $item-&gt;name ?&gt;
  &lt;?php endforeach; ?&gt;
&lt;?php else: ?&gt;
    No item has been found.
&lt;?php endif; ?&gt;</code></pre></noscript></div>
</p>

<p>The advantage is that you have full control over what your template is doing. You can also do everything you want.
But with full control comes responsibility and you have to think about things such as escaping and common web threats such as XSS and CSRF. So we usually end up with a production template like this:
<div><script src='https://gist.github.com/894638.js?file=gistfile2.php'></script>
<noscript><pre><code>&lt;?php if (count($items) &gt; 0): ?&gt;
  &lt;?php foreach ($items as $item): ?&gt;
    * &lt;?php echo htmlspecialchars($item-&gt;name, ENT_QUOTES, 'UTF-8') ?&gt;
  &lt;?php endforeach; ?&gt;
&lt;?php else: ?&gt;
    No item has been found.
&lt;?php endif; ?&gt;</code></pre></noscript></div>
</p>

<p>Another Problem with th <code>&lt;?php ... ?&gt;</code>-Opening tags is that there are still editors who interpret all <code>&lt; ... &gt;</code> blocks as html-tags, and code-highlighting usually goes wrong at that point.</p>

<p>But there are also szenarios where we dont want the template editor to have the full-featureset. E.g. an Administrator editing Templates</p>

<p>So -to sum it up- the principles of a modern Templating System ideally should be:</p>

<ul>
<li>Shortness</li>
<li>Simplicity (nobody really wants to learn a template language)</li>
<li>Support for objects, and a nifty feature set</li>
<li>Template inheritance</li>
<li>Caching</li>
<li>Security such as escaping, purifying, entity-replacement but also easy access to raw-data</li>
</ul>


<h2>The solution: Twig</h2>

<p>I stumbled upon <a href="http://fabien.potencier.org/article/34/templating-engines-in-php">Twig</a> while looking at the featureset of symfony2. And Twig seems to implement all of the points from above and the best thing: It's superfast. Our example from above in Twig would be:</p>

<p><div><script src='https://gist.github.com/894638.js?file=gistfile3.php'></script>
<noscript><pre><code>{% for item in items %}
  * {{ item.name }}
{% else %}
  No item has been found.
{% endfor %}</code></pre></noscript></div>
</p>

<p>Notice how the for has an else construct. This obviously only makes sense in a templating language. But in this context it meets the needs and shortens the coding perfectly.</p>

<p>Twig can evaluate any template in a sandbox environment where the user has access to a limited set of tags, filters, and object methods defined by the developer. Sandboxing can be enabled globally or locally for just some templates:</p>

<p><div><script src='https://gist.github.com/894638.js?file=gistfile4.txt'></script>
<noscript><pre><code>{{ include &quot;user.html&quot; sandboxed }}</code></pre></noscript></div>
</p>

<p>There is no sense to rewrite the documentation at this point so i recommend you to check it out: <a href="http://www.twig-project.org/">Twig Project</a></p>
]]></content>
  </entry>
  
</feed>
