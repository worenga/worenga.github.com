<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Benedikt Wolters]]></title>
  <link href="http://mightyuhu.github.com/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://mightyuhu.github.com/"/>
  <updated>2013-09-07T17:16:49+02:00</updated>
  <id>http://mightyuhu.github.com/</id>
  <author>
    <name><![CDATA[Benedikt Wolters]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Doctrine2 Event Listener: persisting in onFlush()]]></title>
    <link href="http://mightyuhu.github.com/blog/2012/03/27/doctrine2-event-listener-persisting-a-new-entity-in-onflush/"/>
    <updated>2012-03-27T15:34:33+02:00</updated>
    <id>http://mightyuhu.github.com/blog/2012/03/27/doctrine2-event-listener-persisting-a-new-entity-in-onflush</id>
    <content type="html"><![CDATA[<p>Another Doctrine2 Post. This time we're taking a look on Event Listeners/Subscribers.
Event Listeners are a real powerful thing in Doctrine2. Besides <code>LifeCycleCallback</code>s they can be used if you'll want to scan through your Entity i.e. for specialized standard field. Also implementing a global Versionable behaviour (since that is no longer a native Doctrine behaviour) ist very easy to do inside Event Listeners.</p>

<p>My motivation for this quick blog post is just to give people a gist how to use EventListeners because the documentation is -again- a pain in the ass.
Im just using <code>onFlush()</code> here, since <code>preUpdate()</code> is somehow not called by <code>SonataDoctrineORMAdminBundle</code> which i'm using to mainly manage my Entities.</p>

<p>Lets start by creating a EventListener in <code>My/Bundle/Listener/MyEventListener.php</code></p>

<p>{% gist 2215056 MyEventListener.php %}</p>

<p>Now all that is left to do is to attach the Event Listener to DI. If you're using Symfony2 you'll just need to update your <code>app/config/config.yml</code></p>

<p>{% gist 2215056 config.yml %}</p>

<p>For further information feel free to take a look at the beautiful <a href="http://docs.doctrine-project.org/projects/doctrine-orm/en/2.0.x/reference/events.html#implementing-event-listeners">Doctrine2 Documentation</a>, which I obviously love so much.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Doctrine2 One-To-Many, Unidirectional with Join Table Association Mapping]]></title>
    <link href="http://mightyuhu.github.com/blog/2012/03/24/doctrine2-one-to-many/"/>
    <updated>2012-03-24T21:09:05+01:00</updated>
    <id>http://mightyuhu.github.com/blog/2012/03/24/doctrine2-one-to-many</id>
    <content type="html"><![CDATA[<p>Since the Doctrine 2.0 Documentation for this seems to be kinda fucked up at the moment, here is a working exampe of a <code>One-To-Many, Unidirectional with Join-Table Association Mapping</code></p>

<h2>Scenario</h2>

<p>A driver can have many documents, but a document has no direct Entity relation to a driver.</p>

<h2>Solution</h2>

<p>Use Many-To-Many to encode it properly.</p>

<p>{% gist 2186735 %}</p>

<p>Im using annotations with the <code>ORM</code>-Namespace since its embedded in Symfony2.
Note that One-To-Many is coded throughout Many-To-Many but the unique index is set for the join table.</p>

<p>In my POV thats kinda confusing since there is a <code>@One-To-Many</code> relationship, but whatever!</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symfony - initialize Session from request parameter]]></title>
    <link href="http://mightyuhu.github.com/blog/2011/07/17/quick-tip-symfony-initialize-session-from-request-parameter/"/>
    <updated>2011-07-17T14:26:52+02:00</updated>
    <id>http://mightyuhu.github.com/blog/2011/07/17/quick-tip-symfony-initialize-session-from-request-parameter</id>
    <content type="html"><![CDATA[<h2>Motivation</h2>

<p>Working with HTML5 Audio Components, i realized Internet Explorer 9, Google Chrome and Mobile Safari, do not send Domain Cookies when requesting a playable File, which required the necessity to import the sessionid before initalize session management.</p>

<h2>Solution</h2>

<p>I created my own SessionStorage class and adjusted the corresponding routes to have an <kbd>session_id</kbd> parameter.</p>

<p>{% gist 1087434 mySession.class.php%}</p>

<p>{% gist 1087434 factories.yml%}</p>

<p>Whereas <code>sessionid</code> is the routing parameter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symfony: Deliver mobile version of a template without loosing the file specific sf_format parameter]]></title>
    <link href="http://mightyuhu.github.com/blog/2011/07/08/symfony-deliver-mobile-version-of-a-template-without-loosing-the-file-specific-sf-format-parameter/"/>
    <updated>2011-07-08T22:21:18+02:00</updated>
    <id>http://mightyuhu.github.com/blog/2011/07/08/symfony-deliver-mobile-version-of-a-template-without-loosing-the-file-specific-sf-format-parameter</id>
    <content type="html"><![CDATA[<p>I needed a Server-Based mobile switch for my symfony-project. The solutions I found all used a workaround with setting the <code>sf_format</code> parameter to a specific mobile version. But what if you are using <code>sf_format</code> already for different view-types?</p>

<p>My Solution will use the Extension, so you can have multiple view-templates like:</p>

<ul>
<li><code>actionSuccess.mobile.php</code></li>
<li><code>actionSuccess.php</code></li>
<li><code>actionSuccess.mobile.xml.php</code></li>
<li><code>actionSuccess.xml.php</code>
{% gist 1072381 %}</li>
</ul>


<p>I hope this is useful for somebdody! You might want to specify more parameters or make this a filter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Templating Systems - a new hope]]></title>
    <link href="http://mightyuhu.github.com/blog/2011/04/09/templating-systems-a-new-hope/"/>
    <updated>2011-04-09T23:10:31+02:00</updated>
    <id>http://mightyuhu.github.com/blog/2011/04/09/templating-systems-a-new-hope</id>
    <content type="html"><![CDATA[<h2>Birth and Death of old Templating Languages</h2>

<p>A common first time project of every PHP-Developer is to write his own Templating System.
Templating in pseudo languages with weird syntaxes used to be very trendy and served the matter to draw a line between presentation logic and business logic.</p>

<p>It was also believed Templating-languages would be a suitable replacement for plain-php or your favorite backend language, so designers (who -so the common developer belief- are obviously are some zombie creatures without brains) did not need to learn php. This turned out to be a huge error in reasoning, because usually Designers can code at all. (And if they claim they "can", they usually suck at it.)
Another common problem with Template-Systems is performance: other files are parsed by php in the runtime using slow regex or maybe even reparsed with output buffering.</p>

<p>Being a performance enthusiast it always bothered me that something is parsed and compiled by a language such as php, which is parsed itself, just for the sake of code-clearness. Usually they are not cached, and the set of functions is very limited (output this, loop that). If they're cached (e.g. Smarty) there are other Problems (just take a look at the "Cache-File"). Futhermore you as a developer need to learn a simpler templating language, which usually sucks. Debugging Template can be a pain, depending on which template System you use.</p>

<!-- more -->


<h2>PHP is not (anymore) a good template language</h2>

<p>So being enthusiastic about Template-Systems at first, I stopped using them and used the paradigma that <a href="http://www.phppatterns.com/docs/design/templates_and_template_engines">"PHP is a Templating language by itself"</a>.
But the problem with Templating in php is that it is very verbose and tedious.
{% gist 894638 gistfile1.php %}</p>

<p>The advantage is that you have full control over what your template is doing. You can also do everything you want.
But with full control comes responsibility and you have to think about things such as escaping and common web threats such as XSS and CSRF. So we usually end up with a production template like this:
{% gist 894638 gistfile2.php %}</p>

<p>Another Problem with th <code>&lt;?php ... ?&gt;</code>-Opening tags is that there are still editors who interpret all <code>&lt; ... &gt;</code> blocks as html-tags, and code-highlighting usually goes wrong at that point.</p>

<p>But there are also szenarios where we dont want the template editor to have the full-featureset. E.g. an Administrator editing Templates</p>

<p>So -to sum it up- the principles of a modern Templating System ideally should be:</p>

<ul>
<li>Shortness</li>
<li>Simplicity (nobody really wants to learn a template language)</li>
<li>Support for objects, and a nifty feature set</li>
<li>Template inheritance</li>
<li>Caching</li>
<li>Security such as escaping, purifying, entity-replacement but also easy access to raw-data</li>
</ul>


<h2>The solution: Twig</h2>

<p>I stumbled upon <a href="http://fabien.potencier.org/article/34/templating-engines-in-php">Twig</a> while looking at the featureset of symfony2. And Twig seems to implement all of the points from above and the best thing: It's superfast. Our example from above in Twig would be:</p>

<p>{% gist 894638 gistfile3.php %}</p>

<p>Notice how the for has an else construct. This obviously only makes sense in a templating language. But in this context it meets the needs and shortens the coding perfectly.</p>

<p>Twig can evaluate any template in a sandbox environment where the user has access to a limited set of tags, filters, and object methods defined by the developer. Sandboxing can be enabled globally or locally for just some templates:</p>

<p>{% gist 894638 gistfile4.txt %}</p>

<p>There is no sense to rewrite the documentation at this point so i recommend you to check it out: <a href="http://www.twig-project.org/">Twig Project</a></p>
]]></content>
  </entry>
  
</feed>
