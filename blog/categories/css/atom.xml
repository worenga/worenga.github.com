<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: css | Benedikt Wolters]]></title>
  <link href="http://mightyuhu.github.com/blog/categories/css/atom.xml" rel="self"/>
  <link href="http://mightyuhu.github.com/"/>
  <updated>2013-09-07T17:16:49+02:00</updated>
  <id>http://mightyuhu.github.com/</id>
  <author>
    <name><![CDATA[Benedikt Wolters]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introduction to CSS Preprocessors]]></title>
    <link href="http://mightyuhu.github.com/blog/2011/04/09/introduction-to-css-pre-processors/"/>
    <updated>2011-04-09T23:29:54+02:00</updated>
    <id>http://mightyuhu.github.com/blog/2011/04/09/introduction-to-css-pre-processors</id>
    <content type="html"><![CDATA[<h2>The countless problems of pure css</h2>

<p>The one thing while creating .css-Files, which really bothers me is that there is no variability at all. Let's say you want to change a color value that you have applied to like 20 Style-sets in your css, you'll need to replace them all by hand. Maybe there are colors slightly different to the color you want to change (i.e. a hover-color) you'll need to search them all and change them. A painstaking strain.</p><p>Sometimes you'll need to calculate values (e.g. with-values) from another value. CSS has no solution for this, but calculating it by yourself looking for the values you need (There is no DOM in css).</p> <p>Also in CSS there is that nice "approach" to have some sort of object-oriented style language. Well css has of course inheritance, but wouldn't it be nice to have a more dynamic structure that allows variables, conditionals and own-functions.</p>

<!-- more -->


<p>Another common problem in CSS is repetition. The classic example for unnecessary repetition is the border-radius or the opacity-rule:
{% gist 911385 gistfile3.css %}</p>

<p>So this is like a template we use on and on again and it violence to the DRY-paradigm. The bigger your project gets the harder you'll wish to have a solution for that.
Luckily there is a solution for this problems. Actually there are more than one. It's CSS Pre Processors
There are a a few out there, but before we'll get to them there is an easy approach: Using PHP as a CSS Preprocessors.</p>

<h2>Ok. Let's use php to do fancy-css</h2>

<p>If you have read my entry about templating systems you'll know I am no fan of php as templating language. In this context i think its the same argumentation: php is to verbose and will make your css look even more unreadable. (Of course there might be approchaes, where this could work out i.e. if all you need are variables, but thats not my point)</p><p>Take a look at the following example and tell me if its verbose or not:</p>

<p>{% gist 911385 PHP%20as%20CSS%20Preprocessor%20 %}</p>

<p>Another problematic thing about PHP is the caching aspect - again. And talking about css I dont think there is the necessity to have a css rendered on every site request. In fact i dont think a big caching system is needed at all. Usually there is a point where you have a css ready to go, you "compile it" - (using css prepocessors), optimize and compress it. It will not change.</p>

<h2>The Solution(s)</h2>

<p>There are currently many CSS-Preprocessors out there: <a href="http://lesscss.org/">LESS</a>, <a href="http://learnboost.github.com/stylus/">STYLUS</a>, <a href="http://sass-lang.com/docs.html">SASS</a> and SCSS, which is a newer syntax for SASS.
In a nutshell all these preprocessors have features like:</p>

<ul>
<li>Variables</li>
<li>Functions</li>
<li>Mixins</li>
<li>Arithmetic Operators</li>
<li>url()-Rewriting</li>
</ul>


<p>Some of them even implement:</p>

<ul>
<li>Iterations</li>
<li>Conditionals</li>
<li>Nested Selectors</li>
<li>Integrated CSS Compression</li>
<li>Color-, Mathematical-, String- and Regex-functions</li>
</ul>


<p>While LESS, SASS and SCSS are trying to adopt the original CSS Syntax, STYLUS reduces the css syntax for shortness sake. In STYLUS there are no curved brackets and no semicolons. Indentation is used to seperate selectors and contructs.</p>

<p>As for now I can't really tell which one is the best, but this is also a bit dependant on your needs.
So let's take a look at Stylus:</p>

<h2>Stylus - quintessential for a CSS Preprocessor</h2>

<p>Like I said, Stylus concentrates on shortness and is really easy:</p>

<p>{% gist 911385 gistfile4.css %}</p>

<p>becomes</p>

<p>{% gist 911385 gistfile4.yml %}</p>

<p>vendor is a pre-defined library containing standard mixins.
You can define variables, use their contents inside other variables and use operators to modify them:</p>

<p>{% gist 911385 gistfile6.yml %}</p>

<p>compiles to:</p>

<p>{% gist 911385 gistfile7.css %}</p>

<p>You can use nested-selectors by indenting them:</p>

<p>{% gist 911385 Nested%20CSS%20Selectors %}</p>

<p>would be:</p>

<p>{% gist 911385 rendered%20output %}</p>

<p>Here is a nice Video by tjholowaychuk showing the core features of STYLUS.</p>

<object class="contentimage shadow" classid='clsid:d27cdb6e-ae6d-11cf-96b8-444553540000' codebase='http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,115,0' width='560' height='345'><param name='movie' value='http://www.screenr.com/Content/assets/screenr_1116090935.swf' /><param name='flashvars' value='i=161801&svr=undefined' /><param name='allowFullScreen' value='true' /><param name='wmode' value='opaque' /><embed wmode='opaque' src='http://www.screenr.com/Content/assets/screenr_1116090935.swf' flashvars='i=161801&svr=undefined' allowFullScreen='true' width='560' height='345' pluginspage='http://www.macromedia.com/go/getflashplayer' ></embed></object>


<h2>Compiling in STYLUS</h2>

<p>Stylus uses <a href="http://en.wikipedia.org/wiki/Nodejs">Node.js</a>. You can install it over the Node.js packet manager:</p>

<p>{% gist 911385 gistfile8.txt %}</p>

<p>There is an executable you can run and use to compile your .styl-files. Learn more about it  <a href="http://learnboost.github.com/stylus/docs/executable.html">here</a>.</p>
]]></content>
  </entry>
  
</feed>
