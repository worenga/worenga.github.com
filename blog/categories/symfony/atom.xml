<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Symfony | Benedikt Wolters]]></title>
  <link href="http://mightyuhu.github.com/blog/categories/symfony/atom.xml" rel="self"/>
  <link href="http://mightyuhu.github.com/"/>
  <updated>2013-06-17T00:00:42+02:00</updated>
  <id>http://mightyuhu.github.com/</id>
  <author>
    <name><![CDATA[Benedikt Wolters]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Doctrine2 Event Listener: persisting in onFlush()]]></title>
    <link href="http://mightyuhu.github.com/blog/2012/03/27/doctrine2-event-listener-persisting-a-new-entity-in-onflush/"/>
    <updated>2012-03-27T15:34:33+02:00</updated>
    <id>http://mightyuhu.github.com/blog/2012/03/27/doctrine2-event-listener-persisting-a-new-entity-in-onflush</id>
    <content type="html"><![CDATA[<p>Another Doctrine2 Post. This time we're taking a look on Event Listeners/Subscribers.
Event Listeners are a real powerful thing in Doctrine2. Besides <code>LifeCycleCallback</code>s they can be used if you'll want to scan through your Entity i.e. for specialized standard field. Also implementing a global Versionable behaviour (since that is no longer a native Doctrine behaviour) ist very easy to do inside Event Listeners.</p>

<p>My motivation for this quick blog post is just to give people a gist how to use EventListeners because the documentation is -again- a pain in the ass.
Im just using <code>onFlush()</code> here, since <code>preUpdate()</code> is somehow not called by <code>SonataDoctrineORMAdminBundle</code> which i'm using to mainly manage my Entities.</p>

<p>Lets start by creating a EventListener in <code>My/Bundle/Listener/MyEventListener.php</code></p>

<p>{% gist 2215056 MyEventListener.php %}</p>

<p>Now all that is left to do is to attach the Event Listener to DI. If you're using Symfony2 you'll just need to update your <code>app/config/config.yml</code></p>

<p>{% gist 2215056 config.yml %}</p>

<p>For further information feel free to take a look at the beautiful <a href="http://docs.doctrine-project.org/projects/doctrine-orm/en/2.0.x/reference/events.html#implementing-event-listeners">Doctrine2 Documentation</a>, which I obviously love so much.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symfony: Deliver mobile version of a template without loosing the file specific sf_format parameter]]></title>
    <link href="http://mightyuhu.github.com/blog/2011/07/08/symfony-deliver-mobile-version-of-a-template-without-loosing-the-file-specific-sf-format-parameter/"/>
    <updated>2011-07-08T22:21:18+02:00</updated>
    <id>http://mightyuhu.github.com/blog/2011/07/08/symfony-deliver-mobile-version-of-a-template-without-loosing-the-file-specific-sf-format-parameter</id>
    <content type="html"><![CDATA[<p>I needed a Server-Based mobile switch for my symfony-project. The solutions I found all used a workaround with setting the <code>sf_format</code> parameter to a specific mobile version. But what if you are using <code>sf_format</code> already for different view-types?</p>

<p>My Solution will use the Extension, so you can have multiple view-templates like:</p>

<ul>
<li><code>actionSuccess.mobile.php</code></li>
<li><code>actionSuccess.php</code></li>
<li><code>actionSuccess.mobile.xml.php</code></li>
<li><code>actionSuccess.xml.php</code>
{% gist 1072381 %}</li>
</ul>


<p>I hope this is useful for somebdody! You might want to specify more parameters or make this a filter.</p>
]]></content>
  </entry>
  
</feed>
